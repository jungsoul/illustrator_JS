#target Illustrator// Species or genera abundance representation in columns per samplesvar width = 841.89; //define the width of the documentvar height = 595.28; //define the height of the documentvar topmargin = 65; //define the top margin of the documentvar rightmargin = 10; //define the right margin of the documentvar bottommargin = 20; //define the bottom margin of the documentvar leftmargin = 25.5; //define the left margin of the documentvar columnwidth = 64.1; //define the column width var columnheight = height-topmargin-bottommargin; //define the column heightvar samples, nrcolumns, nrsamples;//create an A4-sized document in landscape orientation with one artboardvar doc = app.documents.add(null, width, height, 1);//load the csv file into variable csvFIle//var csvFile = File.openDialog();//checks if the file exists//if (!csvFile.exists) { return; }var csvFile = File('~/Documents/Adobe Scripts/Abundance.csv');if (!csvFile.exists) {    $.writeln("Error: CSV File Not Found");    };nrcolumns = numberOfColumns(csvFile); //establish the number of columnsdrawColumns(csvFile, nrcolumns); //call the drawingfunction numberOfColumns(fileObj){  //calculate the number of columns    var thisLine;    var nrcolumns=0;        fileObj.open( 'r' );        while (!fileObj.eof) {        thisLine=fileObj.readln();        nrcolumns++;            };    fileObj.close();    return nrcolumns-1; };function drawColumns (fileObj, nrcolumns) {    var speciesArray, thisLine;    fileObj.open('r');    var samples=[]; //place in samples[] the name of the samples from the first row    thisLine=fileObj.readln(); //read the first line    samples = thisLine.split( ',' ); //split the first line based on coma separation and put it to samples[]    samples.shift(); //remove the first element from samples[] because it is empty    nrsamples=samples.length; //count the number of samples    var sampleinterval=columnheight/nrsamples; //calculates the space between the samples in relation to column height and number of samples            var columnmargin=(width-(columnwidth*nrcolumns)-leftmargin-rightmargin)/(nrcolumns-1); //calculate the distance between columns                var speciesArray=[];    var speciesName;    var the=true;        var p=doc.pathItems; //add an array of path items        var delimiterlines=p.add();        delimiterlines.setEntirePath([        [5, bottommargin],        [width - rightmargin, bottommargin]        ]);        delimiterlines.strokeWidth=1.5;            var delimiterlines2=p.add();        delimiterlines2.setEntirePath([        [5, bottommargin + columnheight],        [width - rightmargin, bottommargin + columnheight]        ]);        delimiterlines2.strokeWidth=1.5;        for (i=1; i<=nrcolumns; i++) // go through the rest of the rows until the end of the csv file and put each line into an array and display the column     {         thisLine=fileObj.readln();        speciesArray=thisLine.split(',');        speciesArray.shift(); //remove the name of the column (species/genera); speciesArray contains only abundance values now        var max=(Math.ceil((Math.max.apply(null, speciesArray))/10)) *10; //find the maximum value from abundance and round it up to the nearest 10                       var top=height-topmargin;        var left=leftmargin + ((i-1)*columnwidth) + ((i-1)* columnmargin);        var rect=p.rectangle(top, left, columnwidth, columnheight); //draw the column (as a rectangle)        rect.filled = false;        rect.strokeWidth = 1.5;                var dashedline=p.add();        dashedline.setEntirePath([        [leftmargin + ((i-1)*columnwidth) + ((i-1)*columnmargin) + columnwidth/2, bottommargin],        [leftmargin + ((i-1)*columnwidth) + ((i-1)*columnmargin) + columnwidth/2, bottommargin + columnheight]        ]);        dashedline.strokeWidth=1.5;        dashedline.strokeDashes=[4,4];                if (max/2 > 9)        {        var abundancevaluehalf = doc.textFrames.pointText([leftmargin + ((i-1)*columnwidth) + ((i-1)*columnmargin) + columnwidth/2.5, bottommargin - bottommargin/1.8]);        }        else        {           var abundancevaluehalf = doc.textFrames.pointText([leftmargin + ((i-1)*columnwidth) + ((i-1)*columnmargin) + columnwidth/2.2, bottommargin - bottommargin/1.8]);         }        abundancevaluehalf.contents=max/2;                for (j=1; j<=nrsamples+1; j++) //draw the lines at the left of each column from bottom to upper part        {                          var line=p.add(); //add a line                      line.setEntirePath([                        [leftmargin + ((i-1)*columnwidth) + ((i-1)*columnmargin) - 5, (bottommargin + ((j-1)*sampleinterval))],                        [leftmargin + ((i-1)*columnwidth) + ((i-1)*columnmargin), (bottommargin + ((j-1)*sampleinterval))]                        ]);            line.strokeWidth=1.5;        };                            if (the) //displays the name of the samples before the first column from the bottom to top        {                for (j=1, z=0; j<=nrsamples + 1, z<=nrsamples-1; j++, z++)                 {                    var textsamples=doc.textFrames.pointText([leftmargin - 22, bottommargin + ((j-1)*sampleinterval) + (sampleinterval/3)]);                    textsamples.contents=samples[z];                };                the=false;            };         var ell;         for (j=1, k=0; j<=nrsamples + 1, k<nrsamples; j++, k++)         {                ell = p.ellipse(                (bottommargin + ((j-1) * sampleinterval) + (sampleinterval/2) + 1.5),                (leftmargin + ((i-1)*columnwidth) + ((i-1)*columnmargin) + (speciesArray[k]*columnwidth/max) - 1.5),                3,                3,                );                ell.filled = true;                ell.strokeWidth = 1.5;            if (k > 0)            {                var newline=p.add(); //add a line between this ellipse and previous ellipse                newline.setEntirePath([                [leftmargin + ((i-1)*columnwidth) + ((i-1)*columnmargin + speciesArray[k-1]*columnwidth/max), bottommargin + ((j-2) * sampleinterval) + (sampleinterval/2)],                [leftmargin + ((i-1)*columnwidth) + ((i-1)*columnmargin + speciesArray[k]*columnwidth/max), bottommargin + ((j-1) * sampleinterval) + (sampleinterval/2)]                 ]);            newline.strokeCap = StrokeCap.ROUNDENDCAP;            newline.strokeWidth = 2;                    /* if (speciesArray[k*/            };             };};        fileObj.close();};/*    necessary since RGBColor class has no constructor.*/function makeColor(r,g,b){    var c = new RGBColor();    c.red   = r;    c.green = g;    c.blue  = b;    return c;}